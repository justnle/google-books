{"ast":null,"code":"import _objectSpread from \"/Users/Justin/UW-BootCamp/In-Class-Activities/UW-SEA-FSF-PT-11-2019-U-C/21-mern/1-tuesday-mern/activities/05-Stu_ReactRouter/Solved/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/Justin/UW-BootCamp/In-Class-Activities/UW-SEA-FSF-PT-11-2019-U-C/21-mern/1-tuesday-mern/activities/05-Stu_ReactRouter/Solved/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Justin/UW-BootCamp/In-Class-Activities/UW-SEA-FSF-PT-11-2019-U-C/21-mern/1-tuesday-mern/activities/05-Stu_ReactRouter/Solved/client/src/pages/Books.js\";\nimport { BrowserRouter, Link } from 'react-router-dom';\nimport { Col, Container, Row } from '../components/Grid';\nimport { FormBtn, Input, TextArea } from '../components/Form';\nimport { List, ListItem } from '../components/List';\nimport React, { useEffect, useState } from 'react';\nimport API from '../utils/API';\nimport DeleteBtn from '../components/DeleteBtn';\nimport Jumbotron from '../components/Jumbotron';\n\nfunction Books() {\n  // Setting our component's initial state\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        books = _useState2[0],\n        setBooks = _useState2[1];\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        formObject = _useState4[0],\n        setFormObject = _useState4[1]; // Load all books and store them with setBooks\n\n\n  useEffect(() => {\n    loadBooks();\n  }, []); // Loads all books and sets them to books\n\n  function loadBooks() {\n    API.getBooks().then(res => setBooks(res.data)).catch(err => console.error(err));\n  } // Deletes a book from the database with a given id, then reloads books from the db\n\n\n  function deleteBook(id) {\n    API.deleteBook(id).then(() => loadBooks()).catch(err => console.error(err));\n  } // Handles updating component state when the user types into the input field\n\n\n  function handleInputChange(event) {\n    const _event$target = event.target,\n          name = _event$target.name,\n          value = _event$target.value;\n    setFormObject(_objectSpread({}, formObject, {\n      [name]: value\n    }));\n  } // When the form is submitted, use the API.saveBook method to save the book data\n  // Then reload books from the database\n\n\n  function handleFormSubmit(event) {\n    event.preventDefault();\n\n    if (formObject.title && formObject.author) {\n      API.saveBook({\n        title: formObject.title,\n        author: formObject.author,\n        synopsis: formObject.synopsis\n      }).then(() => loadBooks()).catch(err => console.error(err));\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    size: \"md-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Jumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 25\n    }\n  }, \"What Books Should I Read?\")), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    onChange: handleInputChange,\n    name: \"title\",\n    placeholder: \"Title (required)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    onChange: handleInputChange,\n    name: \"author\",\n    placeholder: \"Author (required)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(TextArea, {\n    onChange: handleInputChange,\n    name: \"synopsis\",\n    placeholder: \"Synopsis (Optional)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(FormBtn, {\n    disabled: !(formObject.author && formObject.title),\n    onClick: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 25\n    }\n  }, \"Submit Book\"))), /*#__PURE__*/React.createElement(Col, {\n    size: \"md-6 sm-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Jumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 25\n    }\n  }, \"Books On My List\")), books.length ? /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 25\n    }\n  }, books.map(book => /*#__PURE__*/React.createElement(ListItem, {\n    key: book._id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"/books/\".concat(book._id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 41\n    }\n  }, book.title, \" by \", book.author)), /*#__PURE__*/React.createElement(DeleteBtn, {\n    onClick: () => deleteBook(book._id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 37\n    }\n  })))) : /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 25\n    }\n  }, \"No Results to Display\"))));\n}\n\nexport default Books;","map":{"version":3,"sources":["/Users/Justin/UW-BootCamp/In-Class-Activities/UW-SEA-FSF-PT-11-2019-U-C/21-mern/1-tuesday-mern/activities/05-Stu_ReactRouter/Solved/client/src/pages/Books.js"],"names":["BrowserRouter","Link","Col","Container","Row","FormBtn","Input","TextArea","List","ListItem","React","useEffect","useState","API","DeleteBtn","Jumbotron","Books","books","setBooks","formObject","setFormObject","loadBooks","getBooks","then","res","data","catch","err","console","error","deleteBook","id","handleInputChange","event","target","name","value","handleFormSubmit","preventDefault","title","author","saveBook","synopsis","length","map","book","_id"],"mappings":"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","sourcesContent":["import { BrowserRouter, Link } from 'react-router-dom';\nimport { Col, Container, Row } from '../components/Grid';\nimport { FormBtn, Input, TextArea } from '../components/Form';\nimport { List, ListItem } from '../components/List';\nimport React, { useEffect, useState } from 'react';\nimport API from '../utils/API';\nimport DeleteBtn from '../components/DeleteBtn';\nimport Jumbotron from '../components/Jumbotron';\n\nfunction Books() {\n    // Setting our component's initial state\n    const [books, setBooks] = useState([]);\n    const [formObject, setFormObject] = useState({});\n\n    // Load all books and store them with setBooks\n    useEffect(() => {\n        loadBooks();\n    }, []);\n\n    // Loads all books and sets them to books\n    function loadBooks() {\n        API.getBooks()\n            .then(res => setBooks(res.data))\n            .catch(err => console.error(err));\n    }\n\n    // Deletes a book from the database with a given id, then reloads books from the db\n    function deleteBook(id) {\n        API.deleteBook(id)\n            .then(() => loadBooks())\n            .catch(err => console.error(err));\n    }\n\n    // Handles updating component state when the user types into the input field\n    function handleInputChange(event) {\n        const { name, value } = event.target;\n        setFormObject({ ...formObject, [name]: value });\n    }\n\n    // When the form is submitted, use the API.saveBook method to save the book data\n    // Then reload books from the database\n    function handleFormSubmit(event) {\n        event.preventDefault();\n        if (formObject.title && formObject.author) {\n            API.saveBook({\n                title: formObject.title,\n                author: formObject.author,\n                synopsis: formObject.synopsis\n            })\n                .then(() => loadBooks())\n                .catch(err => console.error(err));\n        }\n    }\n\n    return (\n        <Container fluid>\n            <Row>\n                <Col size=\"md-6\">\n                    <Jumbotron>\n                        <h1>What Books Should I Read?</h1>\n                    </Jumbotron>\n                    <form>\n                        <Input\n                            onChange={handleInputChange}\n                            name=\"title\"\n                            placeholder=\"Title (required)\"\n                        />\n                        <Input\n                            onChange={handleInputChange}\n                            name=\"author\"\n                            placeholder=\"Author (required)\"\n                        />\n                        <TextArea\n                            onChange={handleInputChange}\n                            name=\"synopsis\"\n                            placeholder=\"Synopsis (Optional)\"\n                        />\n                        <FormBtn\n                            disabled={!(formObject.author && formObject.title)}\n                            onClick={handleFormSubmit}\n                        >\n                            Submit Book\n                        </FormBtn>\n                    </form>\n                </Col>\n                <Col size=\"md-6 sm-12\">\n                    <Jumbotron>\n                        <h1>Books On My List</h1>\n                    </Jumbotron>\n                    {books.length ?\n                        <List>\n                            {books.map(book =>\n                                <ListItem key={book._id}>\n                                    <Link to={`/books/${book._id}`}>\n                                        <strong>\n                                            {book.title} by {book.author}\n                                        </strong>\n                                    </Link>\n                                    <DeleteBtn onClick={() => deleteBook(book._id)} />\n                                </ListItem>\n                            )}\n                        </List>\n                        :\n                        <h3>No Results to Display</h3>\n                    }\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default Books;\n"]},"metadata":{},"sourceType":"module"}